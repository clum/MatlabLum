classdef RedEdge
    %REDEDGE This class manipulates MicaSense RedEdge data
    %
    %Christopher Lum
    %lum@uw.edu
    
    %Version History
    %09/10/15: created
    %09/11/15: added internal fields to store info
    %09/14/15: continued adding internal fields
    %09/15/15: continued adding internal fields
    %01/14/24: Updated documentation
    
    %----------------------------------------------------------------------
    %Public properties/fields
    %----------------------------------------------------------------------
    properties (GetAccess='public', SetAccess='public')
        %The directory of the photos to manipulate.  This should be the
        %directory holding only the photos.
        InputPhotosDirectory;
        
        %The directory where to write the rectified images.
        OutputRectifiedPhotosDirectory;
        
        %The directory where to write the cropped images
        OutputCroppedPhotosDirectory;
        
        %The directory where to write the NDVI images
        OutputNDVIPhotosDirectory;
        
        %The level of verbosity for output displays
        %
        %       0 = no outputs
        %       1 = partial, critical message to the screen (recommended)
        %       2 = display all outputs/debugging info to the screen.
        Verbosity;
        
        %The optimizer used for the image rectification/registration
        %process.  This can be geneated by
        %
        %   [optimizer, metric] = imregconfig('multimodal');
        %
        %For more information, see imregister
        RectifyOptimizer;
        
        %The metric used for the image rectification/registration process.
        %This can be generated by
        %
        %   [optimizer, metric] = imregconfig('multimodal');
        %
        %For more information, see imregister
        RectifyMetric;
        
        %Specifies how to generate the composite image.  Valid values are:
        %
        %           'All' =     channel 1 is red
        %                       channel 2 is green
        %                       channel 3 is blue
        %                       channel 4 is near IR
        %                       channel 5 is red edge
        %
        %           'RGB' =     channel 1 is red
        %                       channel 2 is green
        %                       channel 3 is blue
        %
        %           'NDVI' =    channel 1 is red
        %                       channel 2 is near IR
        %                       channel 3 is near IR (a copy)
        CompositeImageType;
        
        %The amount to crop the edges of the photo.  This is specified as a
        %fraction of the total image size.  For example, a value of 0.05
        %will remove 2.5% of the width from the left and right sides,
        %resulting in a picture width that is 95% of the original image.
        %The same is done for the top and bottom.
        CropFraction;
    end
    
    %----------------------------------------------------------------------
    %Private properties/fields
    %----------------------------------------------------------------------
    properties (GetAccess='private', SetAccess='private')
    end
    
    %----------------------------------------------------------------------
    %Static properties/fields
    %----------------------------------------------------------------------
    properties (Constant)
    end
    
    %----------------------------------------------------------------------
    %Public methods
    %----------------------------------------------------------------------
    methods
        %Constructor
        function obj = RedEdge(varargin)
            %REDEDGE  Constructor for the object
            %
            %   [OBJ] = REDEDGE(INPUTPHOTOSDIRECTORY,
            %   OUTPUTRECTIFIEDPHOTOSDIRECTORY,
            %   OUTPUTCROPPEDPHOTOSDIRECTORY) creates an objet
            %   that is used to manipulate the photos stored at the
            %   location INPUTPHOTOSDIRECTORY (see the comments for this
            %   public property/field for more information).
            %
            %INPUT:     -INPUTPHOTOSDIRECTORY:              photos dir
            %           -OUTPUTRECTIFIEDPHOTOSDIRECTORY:    rectified
            %           -OUTPUTCROPPEDPHOTOSDIRECTORY:      cropped
            %
            %OUTPUT:    -OBJ:                               RedEdge object
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/11/15: Created
            %09/15/15: Modified
            %01/14/24: Updated documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 4
                    %Allow the user to specify some inputs at time of
                    %constructions.  For other properties, the user can
                    %individually set these if they want to change them.
                    INPUTPHOTOSDIRECTORY            = varargin{1};
                    OUTPUTRECTIFIEDPHOTOSDIRECTORY  = varargin{2};
                    OUTPUTCROPPEDPHOTOSDIRECTORY    = varargin{3};
                    OUTPUTNDVIPHOTOSDIRECTORY       = varargin{4};
                    
                otherwise
                    error('Invalid number of inputs for constructor');
            end
            
            %------------------CHECKING DATA FORMAT------------------------
            %Checks done in RedEdge.preprocess
            
            %--------------------BEGIN CALCULATIONS------------------------
            %Set up some default parameters
            [rectifyOptimizer, rectifyMetric]  = RedEdge.setupDefaultRectifyOptimizerAndMetric();
            
            obj.InputPhotosDirectory            = INPUTPHOTOSDIRECTORY;
            obj.OutputRectifiedPhotosDirectory  = OUTPUTRECTIFIEDPHOTOSDIRECTORY;
            obj.OutputCroppedPhotosDirectory    = OUTPUTCROPPEDPHOTOSDIRECTORY;
            obj.OutputNDVIPhotosDirectory       = OUTPUTNDVIPHOTOSDIRECTORY;
            obj.Verbosity                       = 1;
            obj.RectifyOptimizer                = rectifyOptimizer;
            obj.RectifyMetric                   = rectifyMetric;
            obj.CompositeImageType              = 'RGB';
            obj.CropFraction                    = 0.05;
            
            obj.preprocess();
        end
        
        %Destructor
        
        %Get/Set
        
        %Class API
        function [varargout] = RectifyImages(varargin)
            %RECTIFYIMAGES Aligns the photos from the RedEdge data set
            %
            %   [B,G,R,NIR,RE] = RECTIFYIMAGES(OBJ, FILEPREFIX) performs an
            %   image registration and realignment for each of the color
            %   band images captured by the MicaSense RedEdge multispectral
            %   camera.  Each color band is realigned with the red channel.
            %   FILEPREFIX should be a string of the prefix of the image
            %   set.  For example, to rectify the files 'IMG_0728_1.tif',
            %   'IMG_0728_2.tif', 'IMG_0728_3.tif', 'IMG_0728_4.tif',
            %   'IMG_0728_5.tif', FILEPREFIX should be set to 'IMG_0728'.
            %
            %   The B, G, R, RE, and NIR returned matrices depend on the
            %   OBJ.CompositeImageType.  If the OBJ.CompositeImageType does
            %   not require a specific channel, these corresponding
            %   channels will be empty.  For example, if
            %   OBJ.CompositeImageType = 'RGB', then the RE and NIR will be
            %   empty as they are not needed for this type of analysis.
            %
            %   Example usage
            %
            %       manipulator = RedEdge('photosDirectory');
            %       [B,G,R,NIR,RE] = manipulator.RectifyImages('IMG_0728');
            %
            %   Notes:
            %       -The desired pictures should be in the current
            %       directory or in the Matlab path.
            %       -The returned red channel is the same as the original
            %       red channel.
            %       -Some of the returned matrices may be empty (see
            %       above).
            %       -The order or returned objects is to be consistent with
            %       how the RedEdge takes photos (see user manual pg.
            %       10-11).
            %
            %   See also:   RedEdge.RectifyImagesBatch
            %               RedEdge.GetFilePrefixesInDirectory
            %               RedEdge.GenerateNDVI
            %
            %INPUT:     -OBJ:           RedEdge object
            %           -FILEPREFIX:    string of desired file set prefix
            %
            %OUTPUT:    -B:             rectified blue channel
            %           -G:             rectified green channel
            %           -R:             rectified red channel
            %           -NIR:           rectified near IR channel
            %           -RE:            rectified red edge channel
            %
            %Created by Matthew Dunbabin
            %m.dunbabin@qut.edu.au
            %
            %Modified by Christopher Lum
            %lum@uw.edu
            
            %Version History
            %06/05/15: Created by Matthew Dunbabin
            %09/10/15: Moved to the RedEdge class and added documentation
            %09/12/15: Change to register against the red edge band instead
            %          of red.
            %09/14/15: Changed back to register against red band since this
            %          is mostly commonly used.  Also skipped registration
            %          of unused channels.
            %01/14/24: Modified documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 2
                    %User supplies all inputs
                    OBJ             = varargin{1};
                    FILEPREFIX      = varargin{2};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            
            %-------------------CHECKING DATA FORMAT-----------------------
            %FILEPREFIX
            assert(ischar(FILEPREFIX), 'FILEPREFIX should be a char array')
            
            %DISPLAYFLAG
            
            %---------------------BEGIN CALCULATIONS-----------------------
            %Load the files with the current image prefix.  Note the order
            %is B, G, R, near IR, and Red Edge as outlined in the user
            %manual (pg. 11).
            imB     = imread([FILEPREFIX '_1.tif']);
            imG     = imread([FILEPREFIX '_2.tif']);
            imR     = imread([FILEPREFIX '_3.tif']);
            imNIR   = imread([FILEPREFIX '_4.tif']);
            imRE    = imread([FILEPREFIX '_5.tif']);
            
            %Blue
            if(OBJ.requiresBlueChannel())
                if (OBJ.Verbosity >= 2)
                    disp('Registering Blue Image against Red');
                end
                
                imBr = imregister(imB, imR, 'affine', OBJ.RectifyOptimizer, OBJ.RectifyMetric);
            else
                imBr = [];
            end
            
            %Green
            if(OBJ.requiresGreenChannel())
                if (OBJ.Verbosity >= 2)
                    disp('Registering Green Image against Red');
                end
                
                imGr = imregister(imG, imR, 'affine', OBJ.RectifyOptimizer, OBJ.RectifyMetric);
            else
                imGr = [];
            end
            
            %Red
            if(OBJ.requiresRedChannel())
                %Just copy the red channel
                imRr = imR;
            else
                imRr = [];
            end
            
            %Near IR
            if(OBJ.requiresNearIRChannel())
                if (OBJ.Verbosity >= 2)
                    disp('Registering Near IR Image against Red');
                end
                
                imNIRr = imregister(imNIR, imR, 'affine', OBJ.RectifyOptimizer, OBJ.RectifyMetric);
            else
                imNIRr = [];
            end
            
            %Red Edge
            if(OBJ.requiresRedEdgeChannel())
                if (OBJ.Verbosity >= 2)
                    disp('Registering Red Edge Image against Red');
                end
                imREr = imregister(imRE, imR, 'affine', OBJ.RectifyOptimizer, OBJ.RectifyMetric);
            else
                imREr = [];
            end
            
            %Package the outputs
            varargout{1} = imBr;
            varargout{2} = imGr;
            varargout{3} = imRr;
            varargout{4} = imNIRr;
            varargout{5} = imREr;
        end
        
        function [varargout] = RectifyImagesBatch(varargin)
            %RECTIFYIMAGESBATCH Batch rectifies the images
            %
            %   RECTIFYIMAGESBATCH(OBJ) rectifies all images in the
            %   OBJ.InputPhotosDirectory and writes out a 3 channel tif
            %   file to the OBJ.OutputRectifiedPhotosDirectory.  The output
            %   tif files have channels specified by
            %   OBJ.CompositeImageType.
            %
            %   Notes:
            %       -The output files do not contain the numbering suffix.
            %
            %   See also:   RedEdge.RectifyImages
            %               RedEdge.GetFilePrefixesInDirectory
            %
            %INPUT:     -OBJ:              The RedEdge object with
            %                              photo directory information
            %                              embedded
            %OUTPUT:    -None
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/10/15: Created
            %09/11/15: Changed to a member function
            %09/12/15: Updated
            %09/15/15: Changed to use data member instead of external input
            %01/14/24: Modified documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 1
                    %User supplies all inputs
                    OBJ                 = varargin{1};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            
            %---------------------BEGIN CALCULATIONS-----------------------
            %Get all the suffixes
            [filePrefixes, allFiles] = RedEdge.GetFilePrefixesInDirectory(OBJ.InputPhotosDirectory);
            
            for k=1:length(filePrefixes)
                currentPrefix = filePrefixes{k};
                
                if(OBJ.Verbosity == 1)
                    t0 = clock;
                end
                
                [B,G,R,NIR,RE] = OBJ.RectifyImages(currentPrefix);
                
                if(OBJ.Verbosity >= 1)
                    t1 = clock;
                    percentComplete = k/length(filePrefixes)*100;
                    
                    disp(['Just rectified ''',currentPrefix,''', time required = ',...
                        num2str(etime(t1, t0)),' seconds.  ',...
                        num2str(percentComplete),'% complete.'])
                end
                
                %Build the multichannel matrix.  Recall that the order of
                %the channels should be specified/documented by
                %OBJ.CompositeImageType.
                if(strcmp(OBJ.CompositeImageType,'All'))
                    compositeImage(:,:,1) = R;
                    compositeImage(:,:,2) = G;
                    compositeImage(:,:,3) = B;
                    compositeImage(:,:,4) = NIR;
                    compositeImage(:,:,5) = RE;
                    
                    warning('This probably will not be able to be written to a tiff file');
                    
                elseif(strcmp(OBJ.CompositeImageType,'RGB'))
                    compositeImage(:,:,1) = R;
                    compositeImage(:,:,2) = G;
                    compositeImage(:,:,3) = B;
                    
                elseif(strcmp(OBJ.CompositeImageType,'NDVI'))
                    compositeImage(:,:,1) = R;
                    compositeImage(:,:,2) = NIR;
                    compositeImage(:,:,3) = NIR;
                    
                else
                    error(['Unsupported OBJ.CompositeImageType of ''',OBJ.CompositeImageType,'''.']);
                end
                
                %Write to the specified directory
                outputFile = [OBJ.OutputRectifiedPhotosDirectory,'\',currentPrefix,'_R.tif'];
                
                t = Tiff(outputFile,'w');
                
                %Set required TIFF tags
                tagstruct.ImageLength = size(compositeImage,1);
                tagstruct.ImageWidth = size(compositeImage,2);
                tagstruct.Photometric = Tiff.Photometric.RGB;
                tagstruct.BitsPerSample = 16;
                tagstruct.SamplesPerPixel = size(compositeImage,3);
                tagstruct.RowsPerStrip = 16;
                tagstruct.PlanarConfiguration = Tiff.PlanarConfiguration.Chunky;
                tagstruct.Software = 'MATLAB';
                t.setTag(tagstruct);
                
                %Write the image data and metadata using the write method
                %of the Tiff object
                t.write(compositeImage);
                
                %close tiff file
                t.close();
            end
        end
        
        function [varargout] = WritePhotosGPSReport(varargin)
            %WRITEPHOTOSGPSREPORT Writes a GPS report to a file
            %
            %   [DATA] = WRITEPHOTOSGPSREPORT(OBJ, FILENAME) writes the gps
            %   info to the specified FILENAME as a CSV file.  The file
            %   should have the columns of
            %
            %       filename, latitude (deg), longitude (deg), alt (m)
            %
            %
            %INPUT:     -OBJ:              The RedEdge object with
            %                              photo directory information
            %                              embedded
            %           -FILENAME:  filename
            %
            %OUTPUT:    -None
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/14/15: Created
            %01/14/24: Modified documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 2
                    %User supplies all inputs
                    OBJ         = varargin{1};
                    FILENAME    = varargin{2};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            %FILENAME
            assert(ischar(FILENAME), 'FILENAME should be a char array')
            
            %---------------------BEGIN CALCULATIONS-----------------------
            %Get all the suffixes
            [filePrefixes, allFiles] = RedEdge.GetFilePrefixesInDirectory(OBJ.InputPhotosDirectory);
            
            data = {};
            for k=1:length(filePrefixes)
                currentPrefix = filePrefixes{k};
                
                [lat, lon, alt] = PhotoGPSInfo.ExtractPhotoLatLonAlt([currentPrefix,'_1.tif']);
                
                data{k,1} = currentPrefix;
                data{k,2} = lat;
                data{k,3} = lon;
                data{k,4} = alt;
            end
            
            PhotoGPSInfo.WriteToCSVFile(FILENAME, data);
        end
        
        function [varargout] = NumberPhotoSetsInMission(varargin)
            %NUMBERPHOTOSETSINMISSION Returns the number of photo sets
            %
            %   [N] = NUMBERPHOTOSETSINMISSION(OBJ) Returns N, the total
            %   number of image sets in the input folder of the OBJ.  Note
            %   that a photo set is considered a set of 5 images.
            %   Therefore the total number of photos in the input directory
            %   is 5*N as there are 5 images per set.
            %
            %   See also: RedEdge.GetFilePrefixesInDirectory
            %
            %INPUT:     -OBJ:   The RedEdge object with photo directory
            %                   information embedded.
            %
            %OUTPUT:    -N:     Number of image sets in the input directory
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/14/15: Created
            %01/14/24: Updated documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 1
                    %User supplies all inputs
                    OBJ                 = varargin{1};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            
            %---------------------BEGIN CALCULATIONS-----------------------
            %Get all the suffixes
            [filePrefixes, allFiles] = RedEdge.GetFilePrefixesInDirectory(OBJ.InputPhotosDirectory);
            
            varargout{1} = length(filePrefixes);
        end
        
        function [varargout] = CropImagesBatch(varargin)
            %CROPIMAGESBATCH Batch crops the images
            %
            %   CROPIMAGESBATCH(OBJ) crops all images writes out a 3
            %   channel tif file to the OBJ.OutputCroppedPhotosDirectory.
            %
            %   Notes:
            %       -The files should already have been rectified and in
            %       located in OBJ.OutputRectifiedPhotosDirectory
            %
            %   See also:   RedEdge.RectifyImagesBatch
            %
            %INPUT:     -OBJ:              The RedEdge object with
            %                              photo directory information
            %                              embedded
            %
            %OUTPUT:    -None
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/15/15: Created
            %11/20/15: Added ability to ignore .ph files
            %01/14/24: Updated documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 1
                    %User supplies all inputs
                    OBJ                 = varargin{1};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            
            %---------------------BEGIN CALCULATIONS-----------------------
            [files] = dir2(OBJ.OutputRectifiedPhotosDirectory, 'only_files');
            
            for k=1:length(files)
                %Read in the file
                currentFile = files{k};
                
                %Ignore *.ph files (these are Perforce placeholder files)
                [~,~,extension] = fileparts(currentFile);
                if(strcmp(extension, 'ph') == 0)
                    continue
                end
                
                [A] = imread([OBJ.OutputRectifiedPhotosDirectory,'\',currentFile]);
                
                %Crop the image
                %How many pixels do we remove from the sides?
                [rows, cols, channels] = size(A);
                
                pixelsRemoveVertical    = floor(rows*OBJ.CropFraction/2);
                pixelsRemoveHorizontal  = floor(cols*OBJ.CropFraction/2);
                
                %Remove the pixels from each channel
                for n=1:channels
                    channelN = A(:,:,n);
                    channelNCropped = channelN(pixelsRemoveVertical:end-pixelsRemoveVertical,...
                        pixelsRemoveHorizontal:end-pixelsRemoveHorizontal);
                    
                    ACropped(:,:,n) = channelNCropped;
                end
                
                %Write to the specified directory
                outputFile = [OBJ.OutputCroppedPhotosDirectory,'\',currentFile(1:end-4),'C.tif'];
                
                t = Tiff(outputFile,'w');
                
                %Set required TIFF tags
                tagstruct.ImageLength = size(ACropped,1);
                tagstruct.ImageWidth = size(ACropped,2);
                tagstruct.Photometric = Tiff.Photometric.RGB;
                tagstruct.BitsPerSample = 16;
                tagstruct.SamplesPerPixel = size(ACropped,3);
                tagstruct.RowsPerStrip = 16;
                tagstruct.PlanarConfiguration = Tiff.PlanarConfiguration.Chunky;
                tagstruct.Software = 'MATLAB';
                t.setTag(tagstruct);
                
                %Write the image data and metadata using the write method
                %of the Tiff object
                t.write(ACropped);
                
                %close tiff file
                t.close();
            end
        end
        
        function [varargout] = CreateNDVIBatch(varargin)
            %CREATENDVIBATCH Create NDVI images in a batch process
            %
            %   CREATENDVIBATCH(OBJ) creates the NDVI maps.
            %
            %   Notes:
            %       -The files should already have been rectified, cropped,
            %       and located in OBJ.OutputRectifiedPhotosDirectory
            %
            %   See also:   RedEdge.RectifyImagesBatch
            %
            %INPUT:     -OBJ:              The RedEdge object with
            %                              photo directory information
            %                              embedded
            %
            %OUTPUT:    -None
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/15/15: Created
            %01/14/24: Updated documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 1
                    %User supplies all inputs
                    OBJ                 = varargin{1};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            
            %---------------------BEGIN CALCULATIONS-----------------------
            [files] = dir2(OBJ.OutputCroppedPhotosDirectory, 'only_files');
            
            for k=1:length(files)
                %Read in the file
                currentFile = files{k};
                [A] = imread([OBJ.OutputCroppedPhotosDirectory,'\',currentFile]);
                
                %Pull out the appropriate channels
                %
                %   Channel 1 = Red
                %   Channel 2 = Near IR
                R       = double(A(:,:,1));
                NIR     = double(A(:,:,2));
                
                %Generate the NDVI map
                NDVI = (NIR - R)./ (NIR + R);
                
                %NDVI is in the range of [-1,1], scale this to a uint16 values range of [0, 65535]
                NDVI_uint16 = uint16((65535/2)*NDVI + (65535/2));
                
                %Write to the specified directory
                outputFile = [OBJ.OutputNDVIPhotosDirectory,'\',currentFile(1:end-4),'_NDVI.tif'];
                
                t = Tiff(outputFile,'w');
                
                %Set required TIFF tags
                tagstruct.ImageLength = size(NDVI_uint16,1);
                tagstruct.ImageWidth = size(NDVI_uint16,2);
                tagstruct.Photometric = Tiff.Photometric.MinIsBlack;
                tagstruct.BitsPerSample = 16;
                tagstruct.SamplesPerPixel = 1;
                tagstruct.RowsPerStrip = 16;
                tagstruct.PlanarConfiguration = Tiff.PlanarConfiguration.Chunky;
                tagstruct.Software = 'MATLAB';
                t.setTag(tagstruct);
                
                %Write the image data and metadata using the write method
                %of the Tiff object
                t.write(NDVI_uint16);
                
                %close tiff file
                t.close();
            end
        end
        
    end
    
    %----------------------------------------------------------------------
    %Private methods
    %----------------------------------------------------------------------
    methods (Access='private')
        function [varargout] = preprocess(varargin)
            %PREPROCESS Performs preprocessing operations
            %
            %   PREPROCESS(OBJ) does the following preprocessing operations
            %
            %       1.  If it exists, deletes the 'thumbs.db' file from the
            %       OBJ.InputPhotosDirectory.
            %
            %       2.  Verifies that there are 16 bits per sample in the
            %       input photos.
            %
            %       3.  Ensures that the appropriate input & output
            %       directories exist. If they do not, this does NOT create
            %       the directories as we want the user to create them
            %       manually to ensure directories do not get created
            %       without their knowledge.
            %
            %       4. Ensures the crop fraction is in the range of [0,1].
            %
            %INPUT:     -OBJ:              The RedEdge object with
            %                              photo directory information
            %                              embedded
            %
            %OUTPUT:    -None
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/11/15: Created
            %01/14/24: Updated documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 1
                    %User supplies all inputs
                    OBJ                 = varargin{1};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            
            %---------------------BEGIN CALCULATIONS-----------------------
            %Step 1:  Determine if there is 'thumbs.db' in the directory
            %and delete if necessary
            [allFiles] = dir2(OBJ.InputPhotosDirectory, 'only_files');
            
            [ThumbsDBIndex] = find(strcmp('Thumbs.db', allFiles));
            if(~isempty(ThumbsDBIndex))
                
                ThumbsDBPath = [OBJ.InputPhotosDirectory,'\Thumbs.db'];
                delete(ThumbsDBPath);
                
                if(OBJ.Verbosity ~= 0)
                    disp('Deleted ''Thumbs.db'' in the input photos folder.');
                end
            end
            
            %Step 2: Ensure that there is 16 bits per sample in the input
            %photos
            warning('Not implemented yet!')
            
            %Step 3: Ensure intput and output directories exist
            assert(exist(OBJ.InputPhotosDirectory)==7, ...
                [OBJ.InputPhotosDirectory, ' does not appear to be a valid directory (does not exist)']);
            
            assert(exist(OBJ.OutputRectifiedPhotosDirectory)==7, ...
                [OBJ.OutputRectifiedPhotosDirectory, ' does not appear to be a valid directory (does not exist)']);
            
            assert(exist(OBJ.OutputCroppedPhotosDirectory)==7, ...
                [OBJ.OutputCroppedPhotosDirectory, ' does not appear to be a valid directory (does not exist)']);
            
            assert(exist(OBJ.OutputNDVIPhotosDirectory)==7, ...
                [OBJ.OutputNDVIPhotosDirectory, ' does not appear to be a valid directory (does not exist)']);
            
            %Step 4: Ensure crop fraction is in range of [0,1]
            assert(OBJ.CropFraction >= 0 && OBJ.CropFraction <= 1, ...
                'CropFraction should be in the range of [0,1].');
        end
        
        function [varargout] = requiresBlueChannel(varargin)
            %REQUIRESBLUECHANNEL Determines if the blue channel is needed
            %
            %   [REQUIRED] = REQUIRESBLUECHANNEL(OBJ) checks if the blue
            %   channel is needed for processing.
            %
            %INPUT:     -OBJ:      The RedEdge object
            %
            %OUTPUT:    -REQUIRED:  1 = blue channel needed, 0 = otherwise
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/14/15: Created
            %01/14/24: Updated documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 1
                    %User supplies all inputs
                    OBJ                 = varargin{1};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            
            %---------------------BEGIN CALCULATIONS-----------------------
            if(strcmp(OBJ.CompositeImageType, 'All') ||...
                    strcmp(OBJ.CompositeImageType, 'RGB'))
                REQUIRED = 1;
            else
                REQUIRED = 0;
            end
            
            varargout{1} = REQUIRED;
        end
        
        function [varargout] = requiresGreenChannel(varargin)
            %REQUIRESGREENCHANNEL Determines if the green channel is needed
            %
            %   [REQUIRED] = REQUIRESGREENCHANNEL(OBJ) checks if the green
            %   channel is needed for processing.
            %
            %INPUT:     -OBJ:      The RedEdge object
            %
            %OUTPUT:    -REQUIRED:  1 = green channel needed, 0 = otherwise
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/14/15: Created
            %01/14/24: Updated documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 1
                    %User supplies all inputs
                    OBJ                 = varargin{1};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            
            %---------------------BEGIN CALCULATIONS-----------------------
            if(strcmp(OBJ.CompositeImageType, 'All') ||...
                    strcmp(OBJ.CompositeImageType, 'RGB'))
                REQUIRED = 1;
            else
                REQUIRED = 0;
            end
            
            varargout{1} = REQUIRED;
        end
        
        function [varargout] = requiresRedChannel(varargin)
            %REQUIRESREDCHANNEL Determines if the red channel is needed
            %
            %   [REQUIRED] = REQUIRESREDCHANNEL(OBJ) checks if the red
            %   channel is needed for processing.
            %
            %INPUT:     -OBJ:       The RedEdge object
            %
            %OUTPUT:    -REQUIRED:  1 = red channel needed, 0 = otherwise
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/14/15: Created
            %01/14/24: Updated documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 1
                    %User supplies all inputs
                    OBJ                 = varargin{1};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            
            %---------------------BEGIN CALCULATIONS-----------------------
            if(strcmp(OBJ.CompositeImageType, 'All') ||...
                    strcmp(OBJ.CompositeImageType, 'RGB') ||...
                    strcmp(OBJ.CompositeImageType, 'NDVI'))
                REQUIRED = 1;
            else
                REQUIRED = 0;
            end
            
            varargout{1} = REQUIRED;
        end
        
        function [varargout] = requiresNearIRChannel(varargin)
            %REQUIRESNEARIRCHANNEL Determines if the near IR channel is needed
            %
            %   [REQUIRED] = REQUIRESNEARIRCHANNEL(OBJ) checks if the near
            %   IR channel is needed for processing.
            %
            %INPUT:     -OBJ:      The RedEdge object
            %
            %OUTPUT:    -REQUIRED:  1 = near IR channel needed, 0 = otherwise
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/14/15: Created
            %01/14/24: Updated documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 1
                    %User supplies all inputs
                    OBJ                 = varargin{1};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            
            %---------------------BEGIN CALCULATIONS-----------------------
            if(strcmp(OBJ.CompositeImageType, 'All') ||...
                    strcmp(OBJ.CompositeImageType, 'RGB') ||...
                    strcmp(OBJ.CompositeImageType, 'NDVI'))
                REQUIRED = 1;
            else
                REQUIRED = 0;
            end
            
            varargout{1} = REQUIRED;
        end
        
        function [varargout] = requiresRedEdgeChannel(varargin)
            %REQUIRESREDEDGECHANNEL Determines if the red edge channel is needed
            %
            %   [REQUIRED] = REQUIRESREDEDGECHANNEL(OBJ) checks if the red
            %   edge channel is needed for processing.
            %
            %
            %INPUT:     -OBJ:      The RedEdge object
            %
            %OUTPUT:    -REQUIRED:  1 = red edge channel needed, 0 = otherwise
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/14/15: Created
            %01/14/24: Updated documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 1
                    %User supplies all inputs
                    OBJ                 = varargin{1};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            
            %---------------------BEGIN CALCULATIONS-----------------------
            if(strcmp(OBJ.CompositeImageType, 'All') ||...
                    strcmp(OBJ.CompositeImageType, 'RGB'))
                REQUIRED = 1;
            else
                REQUIRED = 0;
            end
            
            varargout{1} = REQUIRED;
        end
    end
    
    %----------------------------------------------------------------------
    %Static methods
    %----------------------------------------------------------------------
    methods(Static)
        function [varargout] = GetFilePrefixesInDirectory(varargin)
            %GETFILEPREFIXESINDIRECTORY Gets file prefixes in a directory
            %
            %   [FILEPREFIXES, ALLFILES] =
            %   GETFILEPREFIXESINDIRECTORY(DIRECTORY) extracts all the
            %   FILEPREFIXES in the specified directory.  The a single
            %   file prefix is the string name of the start of a 5 image
            %   set.  ALLFILES is a cell array of all files in the directory.
            %
            %   For example, suppose the specified directory contains the
            %   following files
            %
            %       IMG_0728_1.tif
            %       IMG_0728_2.tif
            %       IMG_0728_3.tif
            %       IMG_0728_4.tif
            %       IMG_0728_5.tif
            %       IMG_0755_1.tif
            %       IMG_0755_2.tif
            %       IMG_0755_3.tif
            %       IMG_0755_4.tif
            %       IMG_0755_5.tif
            %
            %   Then FILEPREFIXES will be a 2 element cell array with the
            %   strings 'IMG_0728' and 'IMG_0755'.  ALLFILES will be a 10
            %   element cell array with the full file name of each file.
            %
            %   Notes:
            %       -The specified directory should only contain RedEdge photos
            %
            %   See also: RedEdge.RectifyImages
            %
            %INPUT:     -DIRECTORY:  the directory of all files
            %
            %OUTPUT:    -FILEPREFIXES:  cell array of all file prefixes
            %           -ALLFILES:      cell array of all files
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/10/15: Created
            %01/14/24: Updated documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 1
                    %User supplies all inputs
                    DIRECTORY = varargin{1};
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            %DIRECTORY
            assert(ischar(DIRECTORY), 'DIRECTORY should be a char array')
            
            %---------------------BEGIN CALCULATIONS-----------------------
            [ALLFILES] = dir2(DIRECTORY, 'only_files');
            
            exitFlag = 0;
            currentFile1Index = 1;
            filesProcessed = 0;
            FILEPREFIXES = {};
            while(~exitFlag)
                %Get the first file in the set
                file1 = ALLFILES{currentFile1Index};
                file2 = ALLFILES{currentFile1Index+1};
                file3 = ALLFILES{currentFile1Index+2};
                file4 = ALLFILES{currentFile1Index+3};
                file5 = ALLFILES{currentFile1Index+4};
                
                %Ensure that all file names are consistent
                filePrefix1 = file1(1:end-6);
                filePrefix2 = file2(1:end-6);
                filePrefix3 = file3(1:end-6);
                filePrefix4 = file4(1:end-6);
                filePrefix5 = file5(1:end-6);
                
                if(~strcmp(filePrefix1, filePrefix2) || ...
                        ~strcmp(filePrefix1, filePrefix3) || ...
                        ~strcmp(filePrefix1, filePrefix4) || ...
                        ~strcmp(filePrefix1, filePrefix5))
                    error(['Filenames are not consistent.  Each file prefix should have 5 images.  Offending image(s) are near the file of ''',ALLFILES{currentFile1Index},'''']);
                else
                    FILEPREFIXES{end+1,1} = filePrefix1;
                end
                
                %Update counters and check termination
                currentFile1Index = currentFile1Index + 5;
                filesProcessed = filesProcessed + 5;
                if(filesProcessed == length(ALLFILES))
                    exitFlag = 1;
                elseif(filesProcessed > length(ALLFILES))
                    error('Number of files in directory is not a multiple of 5')
                end
            end
            
            %Package the outputs
            varargout{1} = FILEPREFIXES;
            varargout{2} = ALLFILES;
        end
    end
    
    %----------------------------------------------------------------------
    %Private Static methods
    %----------------------------------------------------------------------
    methods(Static, Access='private')
        function [varargout] = setupDefaultRectifyOptimizerAndMetric(varargin)
            %SETUPDEFAULTRECTIFYOPTIMIZERANDMETRIC Setup the default parms
            %
            %   [OPTIMIZER, METRIC] =
            %   SETUPDEFAULTRECTIFYOPTIMIZERANDMETRIC() sets up a default
            %   optimizer and metric that can be used for the image
            %   registration/rectification process.
            %
            %INPUT:     -None
            %
            %OUTPUT:    -OPTIMIZER: optimizer for the rectification process
            %           -METRIC:    metric for the rectification process
            %
            %Christopher Lum
            %lum@uw.edu
            
            %Version History
            %09/12/15: Created
            %01/14/24: Udpated documentation
            
            %------------------OBTAIN USER PREFERENCES---------------------
            switch nargin
                case 0
                    %User supplies all inputs
                    
                otherwise
                    error('Invalid number of inputs');
            end
            
            %-------------------CHECKING DATA FORMAT-----------------------
            
            %---------------------BEGIN CALCULATIONS-----------------------
            % Set up the image registration parameters
            [optimizer, metric] = imregconfig('multimodal');
            
            %Tune the parameters
            optimizer.InitialRadius     = 0.0005;
            optimizer.MaximumIterations = 600;
            
            %Package the outputs
            varargout{1} = optimizer;
            varargout{2} = metric;
        end
    end
end